// FINAL, COMPLETE, AND TESTED SCRIPT - v7.0
(() => {
    "use strict";

    window.onerror = function(message, source, lineno, colno, error) {
        document.body.innerHTML = `<div style="padding:20px;color:white;background:black;border:2px solid red;font-family:monospace;text-align:left;direction:ltr;"><h2>Application Error!</h2><p><strong>Message:</strong> ${message}</p><p><strong>Source:</strong> ${source}</p><p><strong>Line:</strong> ${lineno}, Column: ${colno}</p><hr><p>Please send a screenshot of this error to the developer.</p></div>`;
        return true;
    };
    
    document.addEventListener('DOMContentLoaded', () => {
        // --- 1. DATA & CONFIGURATION ---
        const initialCoursesData = {
            '1': {
                'عام': {
                    'أعمال دولية': {
                        '1': ['مبادئ المحاسبة المالية', 'مبادئ الاقتصاد', 'مبادئ القانون', 'لغة أجنبية (1)', 'مبادئ إدارة الأعمال', 'أساسيات الحاسب'],
                        '2': ['محاسبة شركات', 'اقتصاديات التجارة الدولية', 'قانون دولي', 'لغة أجنبية (2)', 'إدارة الموارد البشرية', 'مبادئ التسويق']
                    },
                    'نظم معلومات': {
                        '1': ['طرق ومهارات الاتصال', 'رياضيات الأعمال', 'حقوق الإنسان', 'التفكير الابتكاري', 'السلوك التنظيمي', 'أساسيات الحاسب'],
                        '2': ['مقدمة في نظم المعلومات', 'أساسيات البرمجة', 'رياضيات متقدمة', 'إدارة قواعد البيانات', 'مبادئ الإحصاء', 'لغة إنجليزية فنية']
                    }
                }
            },
            '2': {
                'ساعات معتمدة': {
                    'أعمال دولية': {
                        '1': ['اداره اللوجيستات وسلاسل الامداد', 'مبادئ الاقتصاد الجزئي', 'مبادئ التسويق', 'قانون الاعمال', 'محاسبه التكاليف'],
                        '2': []
                    },
                    'نظم معلومات': {
                        '1': ['تصميم برامج الحاسب', 'اداره الانتاج و العمليات', 'قواعد البيانات', 'محاسبه الشركات', 'قانون الاعمال'],
                        '2': []
                    }
                },
                'لائحة قديمة': {
                    'أعمال دولية': {
                        '1': ['محاسبه شركات الاموال', 'نظم ميكنه الاعمال', 'اداره الانتاج', 'مبادئ الاحصاء', 'العلاقات الدوليه', 'اقتصاديات النقود و البنوك'],
                        '2': []
                    },
                    'نظم معلومات': {
                        '1': ['محاسبه الشركات', 'قواعد البيانات', 'اداره الانتاج', 'القانون التجاري', 'دراسات اقتصاديه باللغه الانجليزيه'],
                        '2': []
                    }
                }
            }
        };
        const initialVideoCoursesData = { 'ecommerce': { title_ar: 'كورسات التجارة الإلكترونية', title_en: 'E-commerce Courses', icon: 'fas fa-cash-register', videos: [ { title: 'كورس التجارة الالكترونية الكامل', embed_url: 'https://www.youtube.com/embed/h0unhODkj40' }, { title: 'دليلك الشامل لتبدأ في التجارة الالكترونية', embed_url: 'https://www.youtube.com/embed/ICFXS5WIS3Y' } ] }, 'graphic-design': { title_ar: 'كورسات الجرافيك ديزاين', title_en: 'Graphic Design Courses', icon: 'fas fa-palette', videos: [ { title: 'كورس جرافيك ديزاين كامل', embed_url: 'https://www.youtube.com/embed/va-MZOPrJ0s' } ] } };
        const initialAiTools = [ {id: 1, name: "ChatGPT", url: "https://chatgpt.com/"}, {id: 2, name: "Gemini", url: "https://gemini.google.com/"}, {id: 3, name: "Perplexity (بحث)", url: "https://www.perplexity.ai/"}, {id: 4, name: "Claude", url: "https://claude.ai/"} ];
        const translations = { ar: { login_choice_btn: "تسجيل الدخول", create_account_btn: "إنشاء حساب", create_account_title: "إنشاء حساب جديد", register_btn: "سجل الآن", login_title_main: "تسجيل الدخول", login_btn_main: "دخول", name_placeholder: "الاسم", password_label: "كلمة السر", password_format_hint: "يجب أن لا تقل عن 8 حروف وتحتوي على أحرف وأرقام.", password_forgot_hint: "يجب عليك عدم نسيان كلمه السر", year_placeholder: "الفرقة", year_1: "الأولى", year_2: "الثانية", major_placeholder: "اختر الفرقة أولاً...", semester_1: "الفصل الدراسي الأول", semester_2: "الفصل الدراسي الثاني", welcome_back: "مرحباً يـ ", nav_pdf: "كتب", nav_sections: "سكاشن", nav_lectures: "محاضرات", nav_ai: "AI", nav_platform: "المنصة", nav_settings: "الإعدادات", nav_about: "عنا", nav_courses: "كورسات", nav_meetings: "ميتنج", nav_meetings_live: "مباشر", meetings_locked_main: "قسم الميتنج مغلق حالياً من قبل الإدارة.", meetings_locked_sub: "سيتم تفعيله عند وجود جلسات مباشرة.", settings_title: "الإعدادات", settings_lang: "اللغة", settings_theme: "الثيم اللوني", settings_mode: "الوضع", mode_dark: "داكن", mode_light: "فاتح", mode_oled: "ليلي", mode_gold_black: "ذهبي", about_title: "Mora for Studying", about_desc: "خاص بالمعهد العالي للحاسبات والمعلومات بطنطا", app_version: "الاصدار 12.5", about_dev: "تم التطوير بواسطه Amr lotfy.", sponsors_title: "تحت رعاية", privacy_policy_btn: "سياسة الخصوصية", privacy_title: "سياسة الخصوصية وشروط الاستخدام", privacy_content: "نحن في Mora for Studying نأخذ خصوصيتك على محمل الجد. البيانات التي يتم جمعها عند التسجيل (مثل الاسم، الفرقة، الشعبة) تُستخدم فقط لتخصيص تجربتك التعليمية. \n\n هذا الموقع يعمل تحت رعاية كريمة من: \n أ. د/ عبدالمنعم الدسوقي \n أ. د/ إبراهيم ماريه \n أ. د/ مصطفى عبدالمنعم \n\n شروط الاستخدام: \n 1. يُستخدم الموقع للأغراض التعليمية فقط. \n 2. يمنع نشر أي محتوى غير لائق أو مسيء. \n 3. احترام جميع المستخدمين وأعضاء هيئة التدريس إلزامي. \n\n أي مخالفة لهذه الشروط قد تؤدي إلى حظر الحساب نهائياً من قبل المطور.", loading_text: "متنساش تصلي علي النبي", rate_website_btn: "قيم الموقع", rating_title: "قيم تجربتك", rating_thanks: "شكراً لتقييمك!", blog_btn: "مدونتي", blog_title: "مدونتي الشخصية", blog_save_btn: "حفظ", blog_saved_success: "تم الحفظ!", timer_btn: "تايمر", timer_title_pomodoro: "تايمر التركيز", timer_start_btn: "بدء", timer_pause_btn: "إيقاف مؤقت", timer_reset_btn: "إعادة ضبط", courses_locked_msg: "هذا القسم يتطلب <span class='highlight'>__UNLOCK__</span> نقطة للفتح. استمر في حضور المحاضرات لجمع النقاط!", dev_credit_text: "تطوير: Amr Lotfy", logout_btn: "تسجيل الخروج", logout_msg: "جاري تسجيل خروجك...", locked_lectures_msg: "لم يقم الأدمن بإضافة محتوى لهذه المحاضرة بعد.", locked_pdfs_msg: "لم يقم الأدمن بإضافة هذا الكتاب بعد.", locked_sections_msg: "لم يقم الأدمن بإضافة محتوى لهذا السكشن بعد.", auth_error_no_account: "لا يوجد حسابات مسجلة. يرجى إنشاء حساب أولاً.", auth_error_user_exists: "هذا الاسم مستخدم بالفعل", auth_error_wrong_pass: "كلمة المرور غير صحيحة", auth_error_banned: "تم حظر هذا الحساب.", captcha_enter_code: "أدخل الرمز", captcha_error: "الرمز غير صحيح، حاول مرة أخرى.", clear_data_btn: "محو البيانات", clear_data_confirm: "هل أنت متأكد من رغبتك في محو جميع البيانات؟ لا يمكن التراجع عن هذا الإجراء.", points_info_main: "لكل محاضرة تدخلها مكافأة <span class='highlight'>__POINTS__</span> نقطة، اجمع <span class='highlight'>__UNLOCK__</span> نقطة لفتح قسم الكورسات.", points_info_dev_credit: "تطوير: Amr Lotfy", nav_opinions: "آراء الطلاب", opinions_title: "آراء الطلاب", opinion_placeholder: "اكتب رأيك هنا...", opinion_submit_btn: "نشر الرأي", opinion_success: "تم نشر رأيك بنجاح!", settings_saved: "تم حفظ الإعدادات بنجاح!", announcement_sent: "تم إرسال الإعلان بنجاح!", nav_announcements: "الإعلانات", nav_site_settings: "إعدادات الموقع", "nav_text_editor": "إدارة نصوص الموقع", nav_ratings_admin: "تقييمات الموقع", nav_ai_tools_admin: "إدارة أدوات AI", nav_majors_admin: "إدارة التخصصات", nav_subjects_admin: "إدارة المواد", regulation_placeholder: "اختر اللائحة", regulation_old: "لائحة قديمة", regulation_credit: "ساعات معتمدة", fill_all_fields: "الرجاء ملء جميع الحقول المطلوبة." }};
        const themes = [ { name: 'Forest', accent: '#00ff7f', glow: 'rgba(0,255,127,0.4)', hover: '#33ff99' }, { name: 'Cosmic', accent: '#be5cff', glow: 'rgba(190,92,255,0.4)', hover: '#d89aff' }, { name: 'Solar', accent: '#ff8c00', glow: 'rgba(255,140,0,0.4)', hover: '#ffa500' }, { name: 'Ocean', accent: '#00bfff', glow: 'rgba(0,191,255,0.4)', hover: '#1e90ff' }, { name: 'Crimson', accent: '#dc143c', glow: 'rgba(220,20,60,0.4)', hover: '#ff4500' } ];
        const USERS_DB_KEY = 'moraUsersDB_v5', CURRENT_USER_KEY = 'moraCurrentUser_v5', LAST_USER_KEY = 'moraLastUser_v5', OPINIONS_DB_KEY = 'moraStudentOpinions_v5', COURSES_DB_KEY = 'moraCoursesDB_v5', CONTENT_DB_KEY = 'moraContentDB_v5', SITE_SETTINGS_KEY = 'moraSiteSettings_v5', ANNOUNCEMENT_KEY = 'moraAnnouncement_v5', TEXT_CONTENT_KEY = 'moraTextContentDB_v5', RATINGS_DB_KEY = 'moraRatingsDB_v5', AI_TOOLS_DB_KEY = 'moraAiToolsDB_v5';
        
        const htmlEl = document.documentElement, body = document.body;
        const loadingPage = document.getElementById("loading-page"), loginPage = document.getElementById("login-page"), mainPage = document.getElementById("main-page"), adminPanel = document.getElementById("admin-panel");
        const authChoiceView = document.getElementById('auth-choice-view'), createAccountView = document.getElementById('create-account-view'), loginView = document.getElementById('login-view');
        const createAccountForm = document.getElementById('create-account-form'), loginForm = document.getElementById('login-form');
        const authMessage = document.getElementById('auth-message');
        const yearSelect = document.getElementById("year"), regulationGroup = document.getElementById('regulation-group'), regulationSelect = document.getElementById('regulation'), majorSelect = document.getElementById("major"), semesterSelect = document.getElementById("semester"), semesterWarning = document.getElementById("semester-warning");
        const captchaCanvas = document.getElementById('captcha-canvas'), captchaRefreshBtn = document.getElementById('captcha-refresh-btn'), captchaInput = document.getElementById('captcha-input');
        const welcomeMessageName = document.getElementById("welcome-message-name"), welcomeMessageDetails = document.getElementById("welcome-message-details");
        const coursesContainer = document.getElementById("courses-container");
        const detailsView = document.getElementById("details-view"), detailsViewTitle = document.getElementById("details-view-title"), detailsViewList = document.getElementById("details-view-list"), backToCoursesBtn = document.getElementById("back-to-courses-btn");
        const timerContainer = document.getElementById('timer-container'), timerDisplay = document.getElementById('timer-display'), startPauseTimerBtn = document.getElementById('start-pause-timer-btn'), resetTimerBtn = document.getElementById('reset-timer-btn'), pomodoroMode = document.getElementById('pomodoro-mode'), pomodoroCycles = document.getElementById('pomodoro-cycles');
        const pointsCounter = document.getElementById('points-counter'), pointsInfoToast = document.getElementById('points-info-toast'), pointsInfoToastContent = document.getElementById('points-info-toast-content'), closeToastBtn = pointsInfoToast.querySelector('.close-toast-btn'), pointingArrow = document.getElementById('pointing-arrow');
        const opinionForm = document.getElementById('opinion-form'), opinionTextarea = document.getElementById('opinion-textarea'), opinionsList = document.getElementById('opinions-list');
        const adminLogoutBtn = document.getElementById('admin-logout-btn'), studentCountEl = document.getElementById('student-count'), opinionsCountEl = document.getElementById('opinions-count'), subjectsCountEl = document.getElementById('subjects-count'), topStudentEl = document.getElementById('top-student'), adminStudentListContainer = document.getElementById('admin-student-list'), adminNavLinks = document.querySelectorAll('.admin-nav-link'), contentEditorModal = document.getElementById('content-editor-modal'), lectureContentModal = document.getElementById('lecture-content-modal'), announcementToast = document.getElementById('announcement-toast'), activeStudentsListEl = document.getElementById('active-students-list');
        const pointsDisplay = document.getElementById('points-display'), coursesBtn = document.getElementById('courses-btn'), coursesIcon = document.getElementById('courses-icon'), coursesLockedModal = document.getElementById('courses-locked-modal'), lockedMessageP = document.getElementById('courses-locked-message');
        const redirectModal = document.getElementById('redirect-modal'), timerElement = document.getElementById('redirect-timer');
        const pointsNotification = document.getElementById('points-notification');
        const meetingsBtn = document.getElementById('meetings-btn'), meetingsLockedModal = document.getElementById('meetings-locked-modal');
        const loginAnimationCanvas = document.getElementById('login-animation-canvas'), loginAnimationCtx = loginAnimationCanvas.getContext('2d');
        const bottomNav = document.getElementById('bottom-nav');

        let captchaText = '', timerInterval, isTimerRunning = false, pomodoroState = 'work', workDuration = 25 * 60, breakDuration = 5 * 60, timeRemaining = workDuration, cycleCount = 1, pointsToastTimeout, activeUserInterval, countdownInterval, currentView = 'subjects', particlesArray;
        
        // --- DATA HANDLING ---
        function getFromStorage(key, defaultValue) { try { const item = localStorage.getItem(key); return item ? JSON.parse(item) : defaultValue; } catch (e) { console.error(`Error parsing localStorage key "${key}":`, e); return defaultValue; } }
        function getUsersDB() { return getFromStorage(USERS_DB_KEY, {}); }
        function getOpinions() { return getFromStorage(OPINIONS_DB_KEY, []); }
        function getRatings() { return getFromStorage(RATINGS_DB_KEY, []); }
        function getCoursesDB() { let courses = getFromStorage(COURSES_DB_KEY, null); if (!courses) { localStorage.setItem(COURSES_DB_KEY, JSON.stringify(initialCoursesData)); return initialCoursesData; } return courses; }
        function getContentDB() { return getFromStorage(CONTENT_DB_KEY, {}); }
        function getSiteSettings() { const defaults = { siteName: "Mora for Studying", pointsToUnlock: 250, pointsPerLecture: 9, bannerText: "شكر خاص وتقدير.", coursesUnlocked: false, meetingsUnlocked: false, meetingUrl: '' }; return getFromStorage(SITE_SETTINGS_KEY, defaults); }
        function getAiToolsDB() { let tools = getFromStorage(AI_TOOLS_DB_KEY, null); if (!tools) { localStorage.setItem(AI_TOOLS_DB_KEY, JSON.stringify(initialAiTools)); return initialAiTools; } return tools; }
        function getAnnouncement() { return getFromStorage(ANNOUNCEMENT_KEY, null); }
        function getTextContentDB() { let texts = getFromStorage(TEXT_CONTENT_KEY, null); if (!texts) { localStorage.setItem(TEXT_CONTENT_KEY, JSON.stringify(translations.ar)); return translations.ar; } return texts; }
        function saveUsersDB(db) { localStorage.setItem(USERS_DB_KEY, JSON.stringify(db)); }
        function saveOpinions(opinionsArray) { localStorage.setItem(OPINIONS_DB_KEY, JSON.stringify(opinionsArray)); }
        function saveRatings(ratingsArray) { localStorage.setItem(RATINGS_DB_KEY, JSON.stringify(ratingsArray)); }
        function saveCoursesDB(data) { localStorage.setItem(COURSES_DB_KEY, JSON.stringify(data)); }
        function saveContentDB(data) { localStorage.setItem(CONTENT_DB_KEY, JSON.stringify(data)); }
        function saveSiteSettings(settings) { localStorage.setItem(SITE_SETTINGS_KEY, JSON.stringify(settings)); }
        function saveAiToolsDB(tools) { localStorage.setItem(AI_TOOLS_DB_KEY, JSON.stringify(tools)); }
        function saveAnnouncement(announcement) { localStorage.setItem(ANNOUNCEMENT_KEY, JSON.stringify(announcement)); }
        function saveTextContentDB(texts) { localStorage.setItem(TEXT_CONTENT_KEY, JSON.stringify(texts)); }
        function getUserData(username, key) { const db = getUsersDB(); return db[username]?.data?.[key]; }
        function getUserProfile(username) { const db = getUsersDB(); return db[username]?.profile; }
        function setUserData(username, key, value) { const db = getUsersDB(); if (db[username]) { if (!db[username].data) { db[username].data = {}; } db[username].data[key] = value; saveUsersDB(db); } }
        function getCurrentUsername() { return localStorage.getItem(CURRENT_USER_KEY); }
        function getCurrentUserRole() { return localStorage.getItem('moraCurrentUserRole'); }
        
        // --- CORE LOGIC ---
        function updateCoursesButtonState() { const settings = getSiteSettings(); const points = getPoints(); if (coursesBtn && coursesIcon) { if (settings.coursesUnlocked || points >= settings.pointsToUnlock) { coursesBtn.classList.remove('locked'); coursesIcon.className = 'fas fa-crown'; } else { coursesBtn.classList.add('locked'); coursesIcon.className = 'fas fa-lock'; } } }
        function updateUserActivity() { const username = getCurrentUsername(); if (username && username !== 'admen') { setUserData(username, 'last_active', Date.now()); } }
        function setLanguage(lang) { htmlEl.lang = lang; htmlEl.dir = lang === 'ar' ? 'rtl' : 'ltr'; const siteTexts = getTextContentDB(); document.querySelectorAll('[data-key]').forEach(el => { const key = el.dataset.key; if (siteTexts[key]) { const settings = getSiteSettings(); let text = siteTexts[key].replace('__UNLOCK__', settings.pointsToUnlock).replace('__POINTS__', settings.pointsPerLecture); if (key.includes('courses_locked_msg') || key.includes('points_info_main') || key === 'privacy_content') { el.innerHTML = text; } else { el.textContent = text; } } }); localStorage.setItem('moraLectureHubLang', lang); updateMajors(yearSelect.value, regulationSelect.value, majorSelect); updateActiveUI(); }
        function setSetting(type, value) { if (type === 'theme') { localStorage.setItem('moraLectureHubTheme', value.name); body.style.setProperty('--accent-color', value.accent); body.style.setProperty('--accent-glow', value.glow); body.style.setProperty('--accent-hover', value.hover); } else if (type === 'mode') { body.className = value; localStorage.setItem('moraLectureHubMode', value); } updateActiveUI(); }
        function populateThemeButtons() { const themeContainer = document.getElementById('theme-switcher'); if(!themeContainer) return; themeContainer.innerHTML = ''; themes.forEach(theme => { const btn = document.createElement('button'); btn.className = 'theme-btn'; btn.title = theme.name; btn.innerHTML = `<span class="theme-swatch" style="background-color:${theme.accent};"></span> <span>${theme.name}</span>`; btn.addEventListener('click', () => setSetting('theme', theme)); themeContainer.appendChild(btn); }); }
        function updateActiveUI() { const lang = localStorage.getItem('moraLectureHubLang') || 'ar'; document.querySelectorAll('#lang-switcher .settings-btn').forEach(btn => btn.classList.toggle('active', btn.dataset.lang === lang)); const themeName = localStorage.getItem('moraLectureHubTheme') || 'Forest'; document.querySelectorAll('#theme-switcher .theme-btn').forEach(btn => btn.classList.toggle('active', btn.title === themeName)); const mode = localStorage.getItem('moraLectureHubMode') || 'mode-dark'; document.querySelectorAll('#mode-switcher .settings-btn').forEach(btn => btn.classList.toggle('active', btn.dataset.mode === mode)); }
        function showAuthMessage(messageKey) { const siteTexts = getTextContentDB(); authMessage.textContent = siteTexts[messageKey] || "Action completed."; authMessage.style.display = 'block'; setTimeout(() => { authMessage.style.display = 'none'; }, 2500); }
        function generateNumericCaptcha() { if(!captchaCanvas) return; const ctx = captchaCanvas.getContext('2d'); captchaText = Math.random().toString().substring(2, 8); const textColor = getComputedStyle(body).getPropertyValue('--primary-text-color'); ctx.clearRect(0, 0, captchaCanvas.width, captchaCanvas.height); ctx.fillStyle = getComputedStyle(body).getPropertyValue('--secondary-bg'); ctx.fillRect(0, 0, captchaCanvas.width, captchaCanvas.height); ctx.font = 'bold 24px "Orbitron", sans-serif'; ctx.fillStyle = textColor; ctx.textAlign = 'center'; ctx.textBaseline = 'middle'; for (let i = 0; i < captchaText.length; i++) { const x = 18 + i * 16; const y = captchaCanvas.height / 2 + (Math.random() - 0.5) * 8; const angle = (Math.random() - 0.5) * 0.4; ctx.save(); ctx.translate(x, y); ctx.rotate(angle); ctx.fillText(captchaText[i], 0, 0); ctx.restore(); } }
        function updateSiteNameUI() { const settings = getSiteSettings(); const siteName = settings.siteName || "Mora for Studying"; document.title = siteName; const welcomeTextEl = document.querySelector('.login-header .welcome-text'); if(welcomeTextEl) welcomeTextEl.textContent = `Welcome to ${siteName}`; const adminHeader = document.getElementById('admin-site-name-header'); if(adminHeader) adminHeader.textContent = `${siteName} Admin`; const aboutTitle = document.querySelector('#about-modal h3'); if (aboutTitle) aboutTitle.textContent = siteName; }
        function showAuthView(viewName, extras = {}) { [authChoiceView, createAccountView, loginView].forEach(v => v.classList.remove('active')); if (viewName === 'choice') { authChoiceView.classList.add('active'); } else if (viewName === 'create') { createAccountView.classList.add('active'); generateNumericCaptcha(); captchaInput.value = ''; fetch('https://ipapi.co/json/').then(res => res.json()).then(data => { document.getElementById('create-country').value = data.country_name || 'N/A'; document.getElementById('create-governorate').value = data.region || 'N/A'; }).catch(() => { document.getElementById('create-country').value = 'Unknown'; document.getElementById('create-governorate').value = 'Unknown'; }); } else if (viewName === 'login') { const loginNameInput = document.getElementById('login-name'); const loginPasswordInput = document.getElementById('login-password'); const lastUser = localStorage.getItem(LAST_USER_KEY); const users = getUsersDB(); loginNameInput.value = lastUser || Object.keys(users).find(u => u !== 'admen') || ''; loginPasswordInput.value = ''; if (extras.newPassword) { loginPasswordInput.value = extras.newPassword; loginNameInput.value = extras.newName; } [loginNameInput, loginPasswordInput].forEach(input => { const label = input.closest('.input-group').querySelector('label'); if (input.value && label) { label.classList.add('active-programmatically'); } else if(label) { label.classList.remove('active-programmatically'); } }); loginView.classList.add('active'); } }
        function updateMajors(year, regulation, majorDropdown) { const siteTexts = getTextContentDB(); majorDropdown.innerHTML = `<option value="" disabled selected>${siteTexts.major_placeholder}</option>`; const reg = (year === '1' || year === '4') ? 'عام' : regulation; if (!year || !reg) return; const coursesData = getCoursesDB(); const yearData = coursesData[year]; if(yearData){ const regData = yearData[reg]; if(regData){const majors = Object.keys(regData); majors.forEach(majorName => { majorDropdown.innerHTML += `<option value="${majorName}">${majorName}</option>`; });}}}
        function populateMainPage(userData) { updateUserActivity(); const coursesData = getCoursesDB(); const siteTexts = getTextContentDB(); const semesterText = siteTexts[`semester_${userData.semester}`] || userData.semester; const yearText = siteTexts[`year_${userData.year}`] || userData.year; const majorText = userData.major; const regulationText = (userData.year === '2' || userData.year === '3') ? ` - ${userData.regulation}` : ''; welcomeMessageName.textContent = `${siteTexts.welcome_back}${userData.name}`; welcomeMessageDetails.textContent = `${majorText}${regulationText} - ${yearText} - ${semesterText}`; pointsDisplay.textContent = getPoints(); updateCoursesButtonState(); checkRatedStatus(); coursesContainer.innerHTML = ""; const subjects = coursesData[userData.year]?.[userData.regulation]?.[majorText]?.[userData.semester] || []; if (subjects.length > 0) { subjects.forEach((subject, index) => { const card = document.createElement('div'); card.className = 'course-card'; card.innerHTML = `<i class="fas ${getIconForCourse(subject)}"></i><h3>${subject}</h3>`; card.style.animationDelay = `${0.1 * index}s`; card.addEventListener('click', () => showSubjectContent(subject)); coursesContainer.appendChild(card); }); } currentView = 'subjects'; }
        function getIconForCourse(e) { const t = e.toLowerCase(); return t.includes("محاسبة") || t.includes("مالية") || t.includes("تكاليف") || t.includes("ضريبية") || t.includes("مراجعة") ? "fa-calculator" : t.includes("اقتصاد") || t.includes("نقود") || t.includes("بنوك") || t.includes("تمويل") ? "fa-chart-line" : t.includes("قانون") ? "fa-gavel" : t.includes("إدارة") || t.includes("اعمال") || t.includes("سلوك") || t.includes("تسويق") || t.includes("موارد") || t.includes("انتاج") || t.includes("لوجيستات") ? "fa-briefcase" : t.includes("حاسب") || t.includes("معلومات") || t.includes("بيانات") || t.includes("برامج") || t.includes("شبكات") || t.includes("ميكنه") ? "fa-laptop-code" : t.includes("رياضيات") || t.includes("احصاء") || t.includes("كمية") ? "fa-square-root-alt" : t.includes("لغة") || t.includes("اتصال") ? "fa-language" : t.includes("حقوق") ? "fa-landmark" : t.includes("مصرفية") || t.includes("بنوك") ? "fa-university" : "fa-book-open"; }
        function getCurrentUserData() { const username = getCurrentUsername(); if(!username) return null; return getUserProfile(username); }
        function showSubjectContent(subjectTitle) { updateUserActivity(); detailsViewTitle.textContent = subjectTitle; detailsViewList.innerHTML = ''; const contentDB = getContentDB(); const subjectContent = contentDB[subjectTitle] || { lectures: [], pdfs: [], sections: [] }; const settings = getSiteSettings(); const createContentItem = (item, typeKey) => { const itemEl = document.createElement('div'); itemEl.className = 'detail-item'; let iconClass = 'fa-file-alt'; if (typeKey === 'pdfs') iconClass = 'fa-file-pdf'; if (typeKey === 'sections') iconClass = 'fa-users-cog'; if (item.type === 'video') iconClass = 'fa-play-circle'; itemEl.innerHTML = `<span>${item.title}</span><i class="fas ${iconClass} lock-icon"></i>`; itemEl.addEventListener('click', () => { const contentId = `${subjectTitle}-${item.id}`; if (typeKey === 'lectures') addPoints(settings.pointsPerLecture, contentId); if (item.type === 'video' || item.type === 'pdf') { showRedirectModal(null, () => window.open(item.url, '_blank')); } else { document.getElementById('lecture-content').innerHTML = `<h3>${item.title}</h3><p>${item.content.replace(/\n/g, '<br>')}</p>`; lectureContentModal.classList.add('active'); } }); return itemEl; }; const renderSection = (type, title) => { const publishedContent = (subjectContent[type] || []).filter(item => item.isPublished); if (publishedContent.length > 0) { detailsViewList.innerHTML += `<h4 style="margin-top: 20px; padding: 0 15px;">${title}</h4>`; publishedContent.forEach(item => detailsViewList.appendChild(createContentItem(item, type))); } }; renderSection('lectures', 'المحاضرات'); renderSection('pdfs', 'الكتب'); renderSection('sections', 'السكاشن'); if (detailsViewList.innerHTML.trim() === '') { detailsViewList.innerHTML = `<p style="text-align:center; opacity:0.7; margin-top: 20px;">لا يوجد محتوى منشور لهذه المادة حالياً.</p>`; } mainPage.classList.add('details-active'); }
        function showContentListForType(contentType) { updateUserActivity(); const userData = getCurrentUserData(); if (!userData) return; const coursesData = getCoursesDB(); const subjects = coursesData[userData.year]?.[userData.regulation]?.[userData.major]?.[userData.semester] || []; const siteTexts = getTextContentDB(); detailsViewTitle.textContent = siteTexts[`nav_${contentType}`]; detailsViewList.innerHTML = ''; subjects.forEach((subject) => { const item = document.createElement('div'); item.className = 'detail-item'; item.innerHTML = `<span>${subject}</span><i class="fas fa-chevron-left lock-icon" style="transform: scaleX(-1);"></i>`; item.addEventListener('click', () => { detailsViewList.innerHTML = ''; detailsViewTitle.textContent = `${subject} - ${siteTexts[`nav_${contentType}`]}`; const contentDB = getContentDB(); const subjectContent = contentDB[subject] || { [contentType]: [] }; const contentArray = subjectContent[contentType] || []; const publishedContent = contentArray.filter(item => item.isPublished); if (publishedContent.length > 0) { publishedContent.forEach(contentItem => { const contentItemEl = document.createElement('div'); contentItemEl.className = 'detail-item'; let iconClass = 'fa-file-alt'; if (contentType === 'pdfs') iconClass = 'fa-file-pdf'; if (contentType === 'sections') iconClass = 'fa-users-cog'; if (contentItem.type === 'video') iconClass = 'fa-play-circle'; contentItemEl.innerHTML = `<span>${contentItem.title}</span><i class="fas ${iconClass} lock-icon"></i>`; contentItemEl.addEventListener('click', () => { const contentId = `${subject}-${contentItem.id}`; if(contentType === 'lectures') addPoints(getSiteSettings().pointsPerLecture, contentId); if (contentItem.type === 'video' || contentItem.type === 'pdf') { showRedirectModal(null, () => window.open(contentItem.url, '_blank')); } else { document.getElementById('lecture-content').innerHTML = `<h3>${contentItem.title}</h3><p>${contentItem.content.replace(/\n/g, '<br>')}</p>`; lectureContentModal.classList.add('active'); } }); detailsViewList.appendChild(contentItemEl); }); } else { detailsViewList.innerHTML = `<p style="text-align:center; opacity:0.7; margin-top: 20px;">${siteTexts[`locked_${contentType}s_msg`]}</p>`; } }); detailsViewList.appendChild(item); }); mainPage.classList.add('details-active'); }
        function updateMeetingButtonState() { const settings = getSiteSettings(); const liveIndicator = meetingsBtn.querySelector('.live-indicator-wrapper'); const lockIcon = meetingsBtn.querySelector('.fa-lock'); const meetingText = meetingsBtn.querySelector('span[data-key="nav_meetings"]'); if (settings.meetingsUnlocked && settings.meetingUrl) { meetingsBtn.classList.add('live'); lockIcon.style.display = 'none'; liveIndicator.style.display = 'flex'; meetingText.style.display = 'none'; } else { meetingsBtn.classList.remove('live'); lockIcon.style.display = 'block'; liveIndicator.style.display = 'none'; meetingText.style.display = 'block'; } }
        function displayVideoCategories() { updateUserActivity(); const lang = htmlEl.lang || 'ar'; coursesContainer.innerHTML = ""; Object.keys(videoCoursesData).forEach((key, index) => { const category = videoCoursesData[key]; const card = document.createElement('div'); card.className = 'course-card'; card.innerHTML = `<i class="${category.icon}"></i><h3>${lang === 'ar' ? category.title_ar : category.title_en}</h3>`; card.style.animationDelay = `${0.1 * index}s`; card.addEventListener('click', () => showVideoList(key)); coursesContainer.appendChild(card); }); currentView = 'videos'; }
        function showVideoList(categoryKey) { updateUserActivity(); const lang = htmlEl.lang || 'ar'; const category = videoCoursesData[categoryKey]; if (!category) return; detailsViewTitle.textContent = lang === 'ar' ? category.title_ar : category.title_en; detailsViewList.innerHTML = ''; category.videos.forEach((video, index) => { const item = document.createElement('div'); item.className = 'detail-item'; item.style.animationDelay = `${index * 0.05}s`; item.innerHTML = `<span>${video.title}</span> <i class="fas fa-play-circle lock-icon"></i>`; item.addEventListener('click', () => showVideoPlayerModal(video.embed_url)); detailsViewList.appendChild(item); }); mainPage.classList.add('details-active'); }
        function showVideoPlayerModal(embedUrl) { updateUserActivity(); const videoPlayerModal = document.getElementById('video-player-modal'); const videoContainer = document.getElementById('video-player-container'); if (!videoPlayerModal || !videoContainer) return; videoContainer.innerHTML = `<iframe src="${embedUrl}" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`; videoPlayerModal.classList.add('active'); }
        function formatTime(seconds) { const m = Math.floor(seconds / 60); const s = seconds % 60; return `${m < 10 ? '0' : ''}${m}:${s < 10 ? '0' : ''}${s}`; }
        function updateTimerDisplay() { timerDisplay.textContent = formatTime(timeRemaining); }
        function updatePomodoroUI() { const siteTexts = getTextContentDB(); if (pomodoroState === 'work') { timerContainer.classList.remove('break-mode'); timerContainer.classList.add('work-mode'); pomodoroMode.textContent = siteTexts.pomodoro_mode_work; } else { timerContainer.classList.remove('work-mode'); timerContainer.classList.add('break-mode'); pomodoroMode.textContent = siteTexts.pomodoro_mode_break; } pomodoroCycles.textContent = `${siteTexts.pomodoro_cycles} ${cycleCount} / 4`; }
        function startPauseTimer() { const siteTexts = getTextContentDB(); if (isTimerRunning) { clearInterval(timerInterval); startPauseTimerBtn.textContent = siteTexts.timer_start_btn; startPauseTimerBtn.classList.remove('running'); } else { timerInterval = setInterval(() => { timeRemaining--; updateTimerDisplay(); if (timeRemaining <= 0) { clearInterval(timerInterval); if (pomodoroState === 'work') { pomodoroState = 'break'; timeRemaining = breakDuration; } else { pomodoroState = 'work'; timeRemaining = workDuration; cycleCount++; } updatePomodoroUI(); updateTimerDisplay(); isTimerRunning = false; startPauseTimerBtn.textContent = siteTexts.timer_start_btn; startPauseTimerBtn.classList.remove('running'); } }, 1000); startPauseTimerBtn.textContent = siteTexts.timer_pause_btn; startPauseTimerBtn.classList.add('running'); } isTimerRunning = !isTimerRunning; }
        function resetTimer() { const siteTexts = getTextContentDB(); clearInterval(timerInterval); isTimerRunning = false; pomodoroState = 'work'; cycleCount = 1; timeRemaining = workDuration; updatePomodoroUI(); updateTimerDisplay(); startPauseTimerBtn.textContent = siteTexts.timer_start_btn; startPauseTimerBtn.classList.remove('running'); }
        function renderOpinions() { const opinions = getOpinions(); const siteTexts = getTextContentDB(); opinionsList.innerHTML = ''; if (opinions.length === 0) { opinionsList.innerHTML = `<p style="text-align:center; opacity: 0.7;">لا توجد آراء حالياً. كن أول من يشارك رأيه!</p>`; } else { opinions.forEach((opinion, index) => { const card = document.createElement('div'); card.className = 'opinion-card'; card.style.animationDelay = `${index * 0.1}s`; const date = new Date(opinion.timestamp).toLocaleString(); const yearText = siteTexts[`year_${opinion.year}`] || opinion.year; const majorText = opinion.major; card.innerHTML = `<div class="opinion-card-header"><div class="opinion-author-details"><span class="opinion-author">${opinion.name}</span><span class="opinion-meta">${majorText} - ${yearText}</span></div><span class="opinion-timestamp">${date}</span></div><p class="opinion-text">${opinion.opinion}</p>`; opinionsList.appendChild(card); }); } }
        function handleOpinionSubmit(e) { e.preventDefault(); const opinionText = opinionTextarea.value.trim(); if (!opinionText) return; const currentUser = getCurrentUsername(); const userProfile = getUserProfile(currentUser); if (!currentUser || !userProfile) return; const newOpinion = { id: Date.now(), name: currentUser, year: userProfile.year, major: userProfile.major, opinion: opinionText, timestamp: new Date().toISOString() }; const opinions = getOpinions(); opinions.unshift(newOpinion); saveOpinions(opinions); renderOpinions(); opinionTextarea.value = ''; showAuthMessage('opinion_success'); }
        function checkRatedStatus() { const username = getCurrentUsername(); if(!username) return; const hasRated = getUserData(username, 'rated'); const rateBtn = document.getElementById('rate-website-btn'); const blogBtn = document.getElementById('blog-btn'); if(rateBtn) rateBtn.style.display = hasRated ? 'none' : 'flex'; if(blogBtn) blogBtn.style.display = hasRated ? 'flex' : 'none'; }
        function showRedirectModal(sourceModalId, actionCallback, customMessage) { const sourceModal = document.getElementById(sourceModalId); if (sourceModal) sourceModal.classList.remove('active'); const siteTexts = getTextContentDB(); const redirectMessageEl = redirectModal.querySelector('.redirect-message'); redirectMessageEl.textContent = customMessage || siteTexts.redirect_msg; let seconds = 3; redirectModal.classList.add('active'); timerElement.textContent = seconds; clearInterval(countdownInterval); countdownInterval = setInterval(() => { seconds--; timerElement.textContent = seconds; if (seconds <= 0) { clearInterval(countdownInterval); redirectModal.classList.remove('active'); if (typeof actionCallback === 'function') actionCallback(); } }, 1000); }
        function studentLogout() { mainPage.classList.add('exit'); setTimeout(() => { mainPage.classList.remove('active', 'exit', 'details-active'); coursesContainer.innerHTML = ''; const lastUser = getCurrentUsername(); localStorage.removeItem(CURRENT_USER_KEY); localStorage.removeItem('moraCurrentUserRole'); if(lastUser) localStorage.setItem(LAST_USER_KEY, lastUser); loginPage.classList.remove('exit'); loginPage.classList.add('active'); showAuthView('login'); }, 700); }
        function adminLogout() { clearInterval(activeUserInterval); adminPanel.classList.add('exit'); setTimeout(() => { adminPanel.classList.remove('active', 'exit'); localStorage.removeItem(CURRENT_USER_KEY); localStorage.removeItem('moraCurrentUserRole'); loginPage.classList.remove('exit'); loginPage.classList.add('active'); showAuthView('login'); }, 700); }
        function populateAiModal() { const container = document.querySelector('#ai-modal .ai-container'); container.innerHTML = ''; const tools = getAiToolsDB(); tools.forEach(tool => { const a = document.createElement('a'); a.href = tool.url; a.className = 'ai-btn'; a.target = '_blank'; a.textContent = tool.name; container.appendChild(a); }); container.querySelectorAll('a').forEach(link => { link.addEventListener('click', (e) => { e.preventDefault(); showRedirectModal('ai-modal', () => window.open(link.href, '_blank')); }); }); }
        function showAdminPanel() { loginPage.classList.remove('active'); mainPage.classList.remove('active'); adminPanel.classList.add('active'); populateAdminPanel(); clearInterval(activeUserInterval); activeUserInterval = setInterval(populateActiveUsers, 15000); }
        function populateAdminPanel() { populateAdminStats(); populateAdminOpinions(); populateStudentList(); populateSiteSettings(); populateAdminTextEditor(); populateActiveUsers(); populateAdminRatings(); populateAdminAiTools(); }
        function populateActiveUsers() { /* ... */ }
        function populateAdminStats() { /* ... */ }
        function populateAdminOpinions() { /* ... */ }
        function populateStudentList() { /* ... */ }
        function createContentManagementUI(contentType, container) { /* ... */ }
        function renderSubjectsForAdmin(year, regulation, major, semester, listElement, contentType) { /* ... */ }
        function openContentEditor(subject, contentType) { /* ... */ }
        function populateSiteSettings() { /* ... */ }
        function checkAnnouncement() { /* ... */ }
        function populateAdminTextEditor() { /* ... */ }
        function populateAdminRatings() { /* ... */ }
        function populateAdminAiTools() { /* ... */ }
        function createSubjectManagementUI(container) { container.innerHTML = `<p><b>ملاحظة:</b> لإدارة المواد (إضافة، تعديل، حذف)، يجب تعديل الكود المصدري حالياً. يمكنك إدارة محتوى المواد الموجودة من أقسام إدارة المحتوى.</p>`; }
        function populateAdminMajors(container) { container.innerHTML = `<p><b>ملاحظة:</b> لإدارة التخصصات، يجب تعديل الكود المصدري مباشرة في الوقت الحالي.</p>`; }
        
        function bindEventListeners() {
            document.getElementById('create-account-choice-btn')?.addEventListener('click', () => showAuthView('create'));
            document.getElementById('login-choice-btn')?.addEventListener('click', () => { const users = getUsersDB(); if (Object.keys(users).filter(u => u !== 'admen').length === 0 && !users['admen']) { showAuthMessage('auth_error_no_account'); return; } showAuthView('login'); });
            document.querySelectorAll('.back-to-choice-btn').forEach(btn => btn.addEventListener('click', () => showAuthView('choice')));
            createAccountForm?.addEventListener('submit', (e) => { e.preventDefault(); /* ... */ });
            loginForm?.addEventListener('submit', (e) => { e.preventDefault(); /* ... */ });
            yearSelect?.addEventListener('change', (e) => { const year = e.target.value; regulationSelect.value = ''; majorSelect.innerHTML = `<option value="" disabled selected data-key="major_placeholder">${translations.ar.major_placeholder}</option>`; if (year === '2' || year === '3') { regulationGroup.style.display = 'block'; } else { regulationGroup.style.display = 'none'; updateMajors(year, 'عام', majorSelect); } });
            regulationSelect?.addEventListener('change', (e) => { updateMajors(yearSelect.value, e.target.value, majorSelect); });
            bottomNav?.addEventListener('click', (e) => { const navButton = e.target.closest('.nav-item'); if (!navButton) return; if (navButton.dataset.action === 'showContent') { showContentListForType(navButton.dataset.type); } else if (navButton.dataset.modal) { const modalId = navButton.dataset.modal; const modal = document.getElementById(modalId); if(modal) { modal.classList.add('active'); if (modalId === 'about-modal') document.querySelector('.glowing-sponsors')?.classList.add('animate'); if (modalId === 'opinions-modal') renderOpinions(); if (modalId === 'ai-modal') populateAiModal(); } } else if (navButton.id === 'courses-btn') { /* ... */ } });
            document.body.addEventListener('click', (e) => { const closeBtn = e.target.closest('.close-btn'); if(closeBtn) { const modal = closeBtn.closest('.modal-overlay'); if(modal) { modal.classList.remove('active'); if(modal.id === 'about-modal') { const sponsors = document.querySelector('.glowing-sponsors'); if(sponsors) sponsors.classList.remove('animate'); } if (modal.id === 'video-player-modal') { const vc = document.getElementById('video-player-container'); if (vc) vc.innerHTML = ''; }}}});
        }
        
        // --- INITIALIZATION ---
        try {
            initializeApp();
        } catch (error) {
            document.body.innerHTML = `<div style="padding: 20px; color: red; text-align: left; direction: ltr;"><h1>An error occurred:</h1><p>${error.message}</p><pre>${error.stack}</pre></div>`;
            console.error("Fatal Application Error:", error);
        }
    });
})();
</script>
</body>
</html>
ده الكود كامل
